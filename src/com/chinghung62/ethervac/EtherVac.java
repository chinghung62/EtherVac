package com.chinghung62.ethervac;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint24;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple15;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>
 * Auto generated code.
 * <p>
 * <strong>Do not modify!</strong>
 * <p>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j
 * command line tools</a>, or the
 * org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen
 * module</a> to update.
 *
 * <p>
 * Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class EtherVac extends Contract {
	public static final String BINARY = "6080346200057e575f80549133827f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a7358180a36001600160a01b031962ffffff338583161760a01c81169081146200056a576001600160b81b03199094163362ffffff60a01b19811691909117600186810160a01b62ffffff60a01b1691909117855594845260208581526040852080549093169091179091556001600160401b036080830181811184821017620005565760c08401818110838211176200054257604052600e81526d21a7a72a2920a1aa2fa7aba722a960911b60a08501528352620000ea62000582565b848152828401908152620000fd62000582565b92858452604085019384526060850195878752338152600282526040812095519283518581116200052e578754948a86811c9616801562000523575b858710146200050f578190601f96878111620004bc575b5085908783116001146200045057859262000444575b50505f19600383901b1c1916908a1b1787555b518051878a0191868211620004305782548b81811c9116801562000425575b868210146200041157908187849311620003be575b5085908783116001146200035257859262000346575b50505f19600383901b1c1916908a1b1790555b600286019451918251948511620003325785548981811c9116801562000327575b828210146200031357848111620002cb575b508093851160011462000263575095966003969284928362000257575b50501b915f1990861b1c19161790555b019051151560ff801983541691161790556040516154c99081620005b78239f35b015192505f8062000226565b9793929091601f1984169886845280842093905b8a8210620002b35750508360039899106200029b575b505050811b01905562000236565b01515f1983881b60f8161c191690555f80806200028d565b80878596829496860151815501950193019062000277565b8683528183208580880160051c82019284891062000309575b0160051c01908a905b828110620002fd57505062000209565b848155018a90620002ed565b92508192620002e4565b634e487b7160e01b83526022600452602483fd5b90607f1690620001f7565b634e487b7160e01b82526041600452602482fd5b015190505f80620001c3565b8486528686208d94509190601f198416875b898282106200039e575050841162000385575b505050811b019055620001d6565b01515f1960f88460031b161c191690555f808062000377565b91929395968291958786015181550195019301908e959493929162000364565b9091508385528585208780850160051c82019288861062000407575b918e91869594930160051c01915b828110620003f8575050620001ad565b8781558594508e9101620003e8565b92508192620003da565b634e487b7160e01b85526022600452602485fd5b90607f169062000198565b634e487b7160e01b84526041600452602484fd5b015190505f8062000166565b8a86528686208d94509190601f198416875b898282106200049c575050841162000483575b505050811b01875562000179565b01515f1960f88460031b161c191690555f808062000475565b91929395968291958786015181550195019301908e959493929162000462565b9091508985528585208780850160051c82019288861062000505575b918e91869594930160051c01915b828110620004f657505062000150565b8781558594508e9101620004e6565b92508192620004d8565b634e487b7160e01b84526022600452602484fd5b95607f169562000139565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526041600452602485fd5b634e487b7160e01b84526011600452602484fd5b5f80fd5b60405190602082016001600160401b03811183821017620005a257604052565b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c80630869cfbc14614b695780631808cd2714614993578063189c1d43146149475780631a695230146148dc5780631a8d5c4c146148a05780632b7832b31461487c57806332b7e7aa1461428657806333255e541461422257806341eb830614613d8b578063429b62e514613ced57806345e6f13a14613c1d5780634ae495ce146137ea5780634b527ff51461343a5780634f76676a146133d657806352d7b89c146133b45780635320665c1461323b5780636460775114613180578063690b13a6146121ed5780636a49bd51146121a15780636ade0fb114611bf0578063a8a3f17c14611855578063a9cbd7b814611819578063b6274466146117bd578063b7111e2d1461128c578063b9ff677e146111bf578063d0c3bb4014610fcb578063dcb7b1b714610fa9578063e29673dd14610e55578063ea3a995614610d61578063f05427871461052f578063f076d643146103dc578063f79c383b146103ba5763fafa787314610184575f80fd5b346103b65761019236614edf565b9161020160018060a01b0380926101ad825f54163314614f30565b16805f5262ffffff602094600586526101cf60ff600460405f200154166152a9565b1692835f52600b85526101eb60ff600e60405f2001541661537e565b835f52600b8552600560405f20015416146153ca565b805f52600b8252608461021a600c60405f200154614ca1565b0361035a57805f52600b8252610242608461023b600d60405f200154614ca1565b141561543c565b5f52600b8152600d60405f2001908251906001600160401b0382116103465761026b8354614ca1565b601f811161030d575b5080601f83116001146102ae57508192935f926102a3575b50505f19600383901b1c191660019190911b179055005b015190505f8061028c565b90601f19831694845f52825f20925f905b8782106102f55750508360019596106102dd575b505050811b019055005b01515f1960f88460031b161c191690555f80806102d3565b806001859682949686015181550195019301906102bf565b61033690845f52825f20601f850160051c81019184861061033c575b601f0160051c0190615005565b5f610274565b9091508190610329565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260048101839052602e60248201527f54686520436572746966696361746520686176656e2774207369676e6564206260448201526d3c902830ba34b2b73a103cb2ba1760911b6064820152608490fd5b5f80fd5b346103b6575f3660031901126103b657602062ffffff60035416604051908152f35b346103b65760803660031901126103b6576103f5614c5f565b6103fd614e44565b906044356001600160401b0381116103b65761041d903690600401614e8a565b6064359182151583036103b65761052d936003926105119260018060a01b039061044b825f54163314614f30565b165f5262ffffff6020926002845261046b60ff8760405f20015416614f87565b165f526008825260405f206040516104988161048a8682018095615181565b03601f198101835282614d2a565b519020906104d3604051928484018351946104ca8782818801986104bd81878c614dec565b8101038084520182614d2a565b51902014615200565b61050060ff86604051868186516104eb81838b614dec565b81016009815203019020015460081c1661525d565b604051938492839251928391614dec565b81016009815203019020019060ff801983541691151516179055565b005b346103b65760e03660031901126103b657610548614c5f565b6024356001600160401b0381116103b657610567903690600401614e8a565b906044356001600160401b0381116103b657610587903690600401614e8a565b906064356001600160401b0381116103b6576105a7903690600401614e8a565b6084356001600160401b0381116103b6576105c6903690600401614e8a565b60a4356001600160401b0381116103b6576105e5903690600401614e8a565b9060c4356001600160401b0381116103b657610605903690600401614e8a565b9260018060a01b039561061c875f54163314614f30565b8686165f52600260205260ff600360405f20015416610d05578686165f52600560205260ff600460405f20015416610ca957604051978860e08101106001600160401b0360e08b0111176103465760e089016040528852602088015260408701526060860152608085015260a0840152600160c0840152165f52600660205260405f209080519182516001600160401b038111610346576106bd8254614ca1565b601f8111610c79575b506020601f8211600114610c1557819293945f92610c0a575b50508160011b915f199060031b1c19161781555b60208201519182516001600160401b038111610346576107166001840154614ca1565b601f8111610bd7575b506020601f8211600114610b6d57819293945f92610b62575b50508160011b915f199060031b1c19161760018301555b60408101519182516001600160401b0381116103465760028201906107748254614ca1565b601f8111610b32575b50602094601f8211600114610ad0579481929394955f92610ac5575b50508160011b915f199060031b1c19161790555b600381019160608101519283516001600160401b038111610346576107d28254614ca1565b601f8111610a95575b50602094601f8211600114610a33579481929394955f92610a28575b50508160011b915f199060031b1c19161790555b600482019160808201519283516001600160401b038111610346576108308254614ca1565b601f81116109f8575b50602094601f8211600114610996579481929394955f9261098b575b50508160011b915f199060031b1c19161790555b600581019160a08101519283516001600160401b0381116103465761088e8254614ca1565b601f811161095b575b506020601f82116001146108ef5791816006949260c09461052d985f926108e4575b50508160011b915f199060031b1c19161790555b0151151591019060ff801983541691151516179055565b0151905088806108b9565b601f19821695835f5260205f20965f5b81811061094357509261052d9760c0959360019383600699971061092b575b505050811b0190556108cd565b01515f1960f88460031b161c1916905588808061091e565b838301518955600190980197602093840193016108ff565b61098590835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b85610897565b015190508580610855565b601f19821695835f5260205f20915f5b8881106109e0575083600195969798106109c8575b505050811b019055610869565b01515f1960f88460031b161c191690558580806109bb565b919260206001819286850151815501940192016109a6565b610a2290835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b85610839565b0151905085806107f7565b601f19821695835f5260205f20915f5b888110610a7d57508360019596979810610a65575b505050811b01905561080b565b01515f1960f88460031b161c19169055858080610a58565b91926020600181928685015181550194019201610a43565b610abf90835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b856107db565b015190508580610799565b601f19821695835f5260205f20915f5b888110610b1a57508360019596979810610b02575b505050811b0190556107ad565b01515f1960f88460031b161c19169055858080610af5565b91926020600181928685015181550194019201610ae0565b610b5c90835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b8561077d565b015190508480610738565b600184015f5260205f20905f5b601f1984168110610bbf5750600193949583601f19811610610ba7575b505050811b01600183015561074f565b01515f1960f88460031b161c19169055848080610b97565b9091602060018192858a015181550193019101610b7a565b610c0490600185015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b8461071f565b0151905084806106df565b825f5260205f20905f5b601f1984168110610c615750600193949583601f19811610610c49575b505050811b0181556106f3565b01515f1960f88460031b161c19169055848080610c3c565b9091602060018192858a015181550193019101610c1f565b610ca390835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b846106c6565b60405162461bcd60e51b815260206004820152602e60248201527f5468652063757272656e742063616c6c657220616c726561647920657869737460448201526d399030b990309021b634b734b19760911b6064820152608490fd5b60405162461bcd60e51b815260206004820152602e60248201527f5468652063757272656e742063616c6c657220616c726561647920657869737460448201526d399030b99030b71020b236b4b71760911b6064820152608490fd5b346103b65760603660031901126103b657610d7a614c5f565b610d82614e44565b90610de062ffffff610d92614c8b565b9360018060a01b038094610daa825f54163314614f30565b165f526002602052610dc560ff600360405f20015416614f87565b1691825f5260046020528060405f205416931680931461501b565b815f526005602052610dfb60ff600460405f20015416615135565b5f52600460205260405f206001600160601b0360a01b81541690555f5260056020525f600460408220610e2d816150c4565b610e39600182016150c4565b610e45600282016150c4565b610e51600382016150c4565b0155005b346103b65760403660031901126103b657610e6e614c5f565b610ee5610e79614e44565b62ffffff60018060a01b038094610e94825f54163314614f30565b1691825f526005602052610eb160ff600460405f200154166152a9565b1692835f52600b602052610ece60ff600e60405f2001541661537e565b835f52600b602052600560405f20015416146153ca565b805f52600b602052610f02608461023b600d60405f200154614ca1565b5f52600b6020525f600e60408220828155610f1f600182016150c4565b610f2b600282016150c4565b610f37600382016150c4565b610f43600482016150c4565b826005820155610f55600682016150c4565b610f61600782016150c4565b610f6d600882016150c4565b610f79600982016150c4565b610f85600a82016150c4565b610f91600b82016150c4565b610f9d600c82016150c4565b610e51600d82016150c4565b346103b6575f3660031901126103b657602062ffffff60075416604051908152f35b346103b657610fd936614edf565b9160018060a01b038091610ff1825f54163314614f30565b16805f5262ffffff6020936006855261101360ff600660405f20015416615300565b1691825f52600b845261102f60ff600e60405f2001541661537e565b825f52600b845260405f2054160361115457805f52600b825261105d608461023b600c60405f200154614ca1565b5f52600b8152600c60405f2001908251906001600160401b038211610346576110868354614ca1565b601f8111611126575b5080601f83116001146110c857508192935f926110bd5750505f19600383901b1c191660019190911b179055005b01519050838061028c565b90601f19831694845f52825f20925f905b87821061110e5750508360019596106110f657505050811b019055005b01515f1960f88460031b161c191690558380806102d3565b806001859682949686015181550195019301906110d9565b61114e90845f52825f20601f850160051c81019184861061033c57601f0160051c0190615005565b8461108f565b60405162461bcd60e51b815260048101839052603e60248201527f54686520436572746966696361746520646f65736e27742062656c6f6e67207460448201527f6f207468652063757272656e742063616c6c696e672050617469656e742e00006064820152608490fd5b346103b65761052d61127d6111d336614edf565b909160018060a01b03906111eb825f54163314614f30565b165f5262ffffff6020926002845261120c60ff600360405f20015416614f87565b1690815f526008835260405f2060405161122d8161048a8782018095615181565b51902091611252604051938585018451956104ca8882818901996104bd81878d614dec565b61126b60ff6003604051878187516104eb81838c614dec565b5f526008835261050060405f206150c4565b8101600981520301902061510c565b346103b65760e03660031901126103b6576112a5614c5f565b6112ad614e44565b6112b5614c8b565b6064356001600160401b0381116103b6576112d4903690600401614e8a565b916084356001600160401b0381116103b6576112f4903690600401614e8a565b9360a4356001600160401b0381116103b657611314903690600401614e8a565b9060c435906001600160401b0382116103b65762ffffff61133c611388933690600401614e8a565b9460018060a01b038093611354825f54163314614f30565b165f52600260205261136f60ff600360405f20015416614f87565b165f5260046020528060405f205416941680941461501b565b825f5260056020526113a360ff600460405f20015416615135565b604051936113b085614cd9565b84526020840194855260408401526060830152600160808301525f52600560205260405f2081519283516001600160401b038111610346576113f28354614ca1565b601f811161178d575b50602094601f821160011461172b579481929394955f92611720575b50508160011b915f199060031b1c19161782555b519182516001600160401b0381116103465761144a6001840154614ca1565b601f81116116ed575b506020601f821160011461168557819293945f9261167a575b50508160011b915f199060031b1c19161760018301555b600282019160408201519283516001600160401b038111610346576114a88254614ca1565b601f811161164a575b50602094601f82116001146115e8579481929394955f926115dd575b50508160011b915f199060031b1c19161790555b600381019160608101519283516001600160401b038111610346576115068254614ca1565b601f81116115ad575b506020601f821160011461155a5791816004949260809461052d985f926108e45750508160011b915f199060031b1c19161790550151151591019060ff801983541691151516179055565b601f19821695835f5260205f20965f5b81811061159557509261052d976080959360019383600499971061092b57505050811b0190556108cd565b8383015189556001909801976020938401930161156a565b6115d790835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b8561150f565b0151905085806114cd565b601f19821695835f5260205f20915f5b8881106116325750836001959697981061161a575b505050811b0190556114e1565b01515f1960f88460031b161c1916905585808061160d565b919260206001819286850151815501940192016115f8565b61167490835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b856114b1565b01519050848061146c565b601f19821690600185015f5260205f20915f5b8181106116d5575095836001959697106116bd575b505050811b016001830155611483565b01515f1960f88460031b161c191690558480806116ad565b9192602060018192868b015181550194019201611698565b61171a90600185015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b84611453565b015190508580611417565b601f19821695845f5260205f20915f5b8881106117755750836001959697981061175d575b505050811b01825561142b565b01515f1960f88460031b161c19169055858080611750565b9192602060018192868501518155019401920161173b565b6117b790845f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b856113fb565b346103b65760403660031901126103b6576117d6614c5f565b6001600160a01b03165f908152600c602052604090208054602435908110156103b65761180962ffffff91602093614e56565b9190546040519260031b1c168152f35b346103b65760203660031901126103b65762ffffff611836614e32565b165f526004602052602060018060a01b0360405f205416604051908152f35b346103b65760803660031901126103b65761186e614c5f565b6001600160401b03906024358281116103b65761188f903690600401614e8a565b906044358381116103b6576118a8903690600401614e8a565b906064358481116103b6576118c1903690600401614e8a565b5f5490916001600160a01b03916118db9083163314614f30565b1690815f52602091600283526003936118fc60ff8660405f20015416614f87565b6040519561190987614cf4565b86528386019081526040860192835260608601936001928386525f526002815260405f20965191825189811161034657806119448a54614ca1565b94601f95868111611bc4575b508490868311600114611b66575f92611b5b575b50505f19828a1b1c191690851b1788555b518051888501918a821161034657819061198f8454614ca1565b868111611b2f575b508490868311600114611ad1575f92611ac6575b50505f19828a1b1c191690851b1790555b600287019351908151988911610346576119d68554614ca1565b89848211611a8f575b505080928911600114611a2d575061052d97925f92849283611a22575b50501b915f1990861b1c19161790555b51151591019060ff801983541691151516179055565b0151925089806119fc565b909791601f19831698855f52825f20925f905b8b8210611a785750508361052d9a10611a61575b505050811b019055611a0c565b01515f1983881b60f8161c19169055878080611a54565b808785968294968601518155019501930190611a40565b611ab691875f5285845f20918582850160051c84019410611abd575b0160051c0190615005565b89896119df565b92508192611aab565b015190508b806119ab565b90879350601f19831691855f52865f20925f5b88828210611b195750508411611b02575b505050811b0190556119bc565b01515f19838c1b60f8161c191690558b8080611af5565b8385015186558b97909501949384019301611ae4565b611b5590855f52865f208880860160051c820192898710611abd570160051c0190615005565b8c611997565b015190508b80611964565b90879350601f198316918c5f52865f20925f5b88828210611bae5750508411611b97575b505050811b018855611975565b01515f19838c1b60f8161c191690558b8080611b8a565b8385015186558b97909501949384019301611b79565b611bea908c5f52865f208880860160051c820192898710611abd570160051c0190615005565b8c611950565b346103b65760a03660031901126103b657611c09614c5f565b6024356001600160401b0381116103b657611c28903690600401614e8a565b906044356001600160401b0381116103b657611c48903690600401614e8a565b6064356001600160401b0381116103b657611c67903690600401614e8a565b916084356001600160401b0381116103b657611c87903690600401614e8a565b5f5490916001600160a01b0391611ca19083163314614f30565b165f526002602052611cbc60ff600360405f20015416614f87565b60ff60036040516020818851611cd58183858d01614dec565b81016009815203019020015460081c1661215c5760075462ffffff9081811691611cfe83614fdd565b169062ffffff1916176007555f52600860205260405f2084516001600160401b03811161034657611d2f8254614ca1565b601f811161212c575b50806020601f82116001146120c9575f916120be575b508160011b915f199060031b1c19161790555b60405191611d6e83614cd9565b8252602082019283526040820190815260608201935f85526080830193611da960206001938488528160405193828580945193849201614dec565b8101600981520301902093518051906001600160401b038211610346578190611dd28754614ca1565b601f811161208e575b50602090601f831160011461202e575f92612023575b50505f19600383901b1c191690831b1784555b518051848301916001600160401b038211610346578190611e258454614ca1565b601f8111611ff3575b50602090601f8311600114611f93575f92611f88575b50505f19600383901b1c191690831b1790555b600283019151908151916001600160401b03831161034657611e798454614ca1565b601f8111611f58575b50602090601f8411600114611eee579280600395938193611ecc98965f94611ee3575b50501b915f1990861b1c19161790555b0192511515839060ff801983541691151516179055565b51815461ff00191690151560081b61ff0016179055005b015192508a80611ea5565b90601f93929319831691855f5260205f20925f5b818110611f42575091611ecc9795939185600398969410611f2b575b505050811b019055611eb5565b01515f1983881b60f8161c19169055888080611f1e565b8284015185559386019360209384019301611f02565b611f8290855f5260205f20601f860160051c8101916020871061033c57601f0160051c0190615005565b87611e82565b015190508880611e44565b90859350601f19831691855f5260205f20925f5b818110611fdb57508411611fc3575b505050811b019055611e57565b01515f1960f88460031b161c19169055888080611fb6565b82840151855588969094019360209384019301611fa7565b61201d90855f5260205f20601f850160051c8101916020861061033c57601f0160051c0190615005565b89611e2e565b015190508880611df1565b90859350601f19831691885f5260205f20925f5b8181106120765750841161205e575b505050811b018455611e04565b01515f1960f88460031b161c19169055888080612051565b82840151855588969094019360209384019301612042565b6120b890885f5260205f20601f850160051c8101916020861061033c57601f0160051c0190615005565b89611ddb565b905086015187611d4e565b9150825f5260205f205f925b601f1983168410612114576001935082601f198116106120fc575b5050811b019055611d61565b8801515f1960f88460031b161c1916905587806120f0565b888101518255602093840193600190920191016120d5565b61215690835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b86611d38565b60405162461bcd60e51b815260206004820152601b60248201527f5468652056616363696e6520616c7265616479206578697374732e00000000006044820152606490fd5b346103b65760203660031901126103b65762ffffff6121be614e32565b165f5260086020526121e96121d560405f20614d4b565b604051918291602083526020830190614e0d565b0390f35b346103b6576101803660031901126103b657612207614c5f565b61220f614c75565b906044356001600160401b0381116103b65761222f903690600401614e8a565b906064356001600160401b0381116103b65761224f903690600401614e8a565b906084356001600160401b0381116103b65761226f903690600401614e8a565b9060a4356001600160401b0381116103b65761228f903690600401614e8a565b9060c4356001600160401b0381116103b6576122af903690600401614e8a565b60e4356001600160401b0381116103b6576122ce903690600401614e8a565b91610104356001600160401b0381116103b6576122ef903690600401614e8a565b93610124356001600160401b0381116103b657612310903690600401614e8a565b95610144356001600160401b0381116103b657612331903690600401614e8a565b976001600160401b0361016435116103b6576123533661016435600401614e8a565b9961236860018060a01b035f54163314614f30565b6001600160a01b0385165f9081526005602052604090206004015461238f9060ff166152a9565b60018060a01b038c165f52600660205260ff600660405f200154161561313b576123f262ffffff600a54168d60018060a01b03165f52600c6020526123d660405f20615358565b90919082549060031b9162ffffff809116831b921b1916179055565b61241962ffffff600a541660018060a01b0387165f52600d6020526123d660405f20615358565b6040519b8c6001600160401b036101e0828181011092011117610346576101e08d0160405260018060a01b03168c5260208c015260408b015260608a0152608089015260018060a01b031660a088015260c087015260e086015261010085015261012084015261014083015261016082015260405161249781614d0f565b5f81526101808201526040516124ac81614d0f565b5f81526101a082015260016101c082015262ffffff600a54165f52600b60205260405f209060018060a01b038151166001600160601b0360a01b83541617825560208101519182516001600160401b0381116103465761250f6001830154614ca1565b601f8111613108575b506020601f821160011461309e57819293945f92613093575b50508160011b915f199060031b1c19161760018201555b60408201519182516001600160401b0381116103465761256b6002840154614ca1565b601f8111613060575b506020601f8211600114612ff657819293945f92612feb575b50508160011b915f199060031b1c19161760028301555b60608101519182516001600160401b038111610346576125c76003830154614ca1565b601f8111612fb8575b506020601f8211600114612f4e57819293945f92612f43575b50508160011b915f199060031b1c19161760038201555b60808201519182516001600160401b038111610346576126236004840154614ca1565b601f8111612f10575b506020601f8211600114612ea657819293945f92612e9b575b50508160011b915f199060031b1c19161760048301555b6005820160018060a01b0360a0830151166001600160601b0360a01b82541617905560c08101519182516001600160401b038111610346576126a16006830154614ca1565b601f8111612e68575b506020601f8211600114612dfe57819293945f92612df3575b50508160011b915f199060031b1c19161760068201555b60e08201519182516001600160401b038111610346576126fd6007840154614ca1565b601f8111612dc0575b506020601f8211600114612d5657819293945f92612d4b575b50508160011b915f199060031b1c19161760078301555b6101008101519182516001600160401b0381116103465761275a6008830154614ca1565b601f8111612d18575b506020601f8211600114612cae57819293945f92612ca3575b50508160011b915f199060031b1c19161760088201555b6101208201519182516001600160401b0381116103465760098301906127b98254614ca1565b601f8111612c73575b506020601f8211600114612c105781929394955f92612c05575b50508160011b915f199060031b1c19161790555b6101408101519182516001600160401b03811161034657600a8201906128168254614ca1565b601f8111612bd5575b50602094601f8211600114612b73579481929394955f92612b68575b50508160011b915f199060031b1c19161790555b6101608201519182516001600160401b03811161034657600b8301906128758254614ca1565b601f8111612b38575b50602094601f8211600114612ad6579481929394955f92612acb575b50508160011b915f199060031b1c19161790555b600c8201916101808201519283516001600160401b038111610346576128d48254614ca1565b601f8111612a9b575b50602094601f8211600114612a39579481929394955f92612a2e575b50508160011b915f199060031b1c19161790555b600d8101916101a08101519283516001600160401b038111610346576129338254614ca1565b601f81116129fe575b506020601f82116001146129aa579181600e94926101c094612988985f926108e45750508160011b915f199060031b1c19161790550151151591019060ff801983541691151516179055565b600a5462ffffff61299a818316614fdd565b62ffffff19909216911617600a55005b601f19821695835f5260205f20965f5b8181106129e6575092612988976101c0959360019383600e99971061092b57505050811b0190556108cd565b838301518955600190980197602093840193016129ba565b612a2890835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b8561293c565b0151905085806128f9565b601f19821695835f5260205f20915f5b888110612a8357508360019596979810612a6b575b505050811b01905561290d565b01515f1960f88460031b161c19169055858080612a5e565b91926020600181928685015181550194019201612a49565b612ac590835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b856128dd565b01519050858061289a565b601f19821695835f5260205f20915f5b888110612b2057508360019596979810612b08575b505050811b0190556128ae565b01515f1960f88460031b161c19169055858080612afb565b91926020600181928685015181550194019201612ae6565b612b6290835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b8561287e565b01519050858061283b565b601f19821695835f5260205f20915f5b888110612bbd57508360019596979810612ba5575b505050811b01905561284f565b01515f1960f88460031b161c19169055858080612b98565b91926020600181928685015181550194019201612b83565b612bff90835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b8561281f565b0151905085806127dc565b825f5260205f20905f96601f198416975b888110612c5b57508360019596979810612c43575b505050811b0190556127f0565b01515f1960f88460031b161c19169055858080612c36565b91926020600181928685015181550194019201612c21565b612c9d90835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b856127c2565b01519050848061277c565b600883015f5260205f20905f5b601f1984168110612d005750600193949583601f19811610612ce8575b505050811b016008820155612793565b01515f1960f88460031b161c19169055848080612cd8565b9091602060018192858a015181550193019101612cbb565b612d4590600884015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b84612763565b01519050848061271f565b600784015f5260205f20905f5b601f1984168110612da85750600193949583601f19811610612d90575b505050811b016007830155612736565b01515f1960f88460031b161c19169055848080612d80565b9091602060018192858a015181550193019101612d63565b612ded90600785015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b84612706565b0151905084806126c3565b600683015f5260205f20905f5b601f1984168110612e505750600193949583601f19811610612e38575b505050811b0160068201556126da565b01515f1960f88460031b161c19169055848080612e28565b9091602060018192858a015181550193019101612e0b565b612e9590600684015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b846126aa565b015190508480612645565b600484015f5260205f20905f5b601f1984168110612ef85750600193949583601f19811610612ee0575b505050811b01600483015561265c565b01515f1960f88460031b161c19169055848080612ed0565b9091602060018192858a015181550193019101612eb3565b612f3d90600485015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b8461262c565b0151905084806125e9565b600383015f5260205f20905f5b601f1984168110612fa05750600193949583601f19811610612f88575b505050811b016003820155612600565b01515f1960f88460031b161c19169055848080612f78565b9091602060018192858a015181550193019101612f5b565b612fe590600384015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b846125d0565b01519050848061258d565b600284015f5260205f20905f5b601f19841681106130485750600193949583601f19811610613030575b505050811b0160028301556125a4565b01515f1960f88460031b161c19169055848080613020565b9091602060018192858a015181550193019101613003565b61308d90600285015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b84612574565b015190508480612531565b600183015f5260205f20905f5b601f19841681106130f05750600193949583601f198116106130d8575b505050811b016001820155612548565b01515f1960f88460031b161c191690558480806130c8565b9091602060018192858a0151815501930191016130ab565b61313590600184015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b84612518565b60405162461bcd60e51b815260206004820152601a60248201527f5468652050617469656e7420646f65736e27742065786973742e0000000000006044820152606490fd5b346103b65760203660031901126103b6576001600160a01b036131a1614c5f565b165f52600560205261320560405f206131b981614d4b565b9061322f6131c960018301614d4b565b916132216131d960028301614d4b565b61321360ff60046131ec60038701614d4b565b950154169560405198899860a08a5260a08a0190614e0d565b9088820360208a0152614e0d565b908682036040880152614e0d565b908482036060860152614e0d565b90151560808301520390f35b346103b65760603660031901126103b657613254614c5f565b61325c614e44565b613264614c8b565b5f546001600160a01b0393849161327e9083163314614f30565b16805f5262ffffff602093600285526132a060ff600360405f20015416614f87565b1693841561336f57906132c89291855f52600185528060405f2054169216928380931461501b565b1461331257600292815f528383526132e960ff600360405f20015416615078565b5f526001825260405f206001600160601b0360a01b81541690555f525261052d60405f2061510c565b60405162461bcd60e51b815260048101839052602f60248201527f43616e6e6f742072656d6f7665207468652063757272656e742063616c6c696e60448201526e339020b236b4b71034ba39b2b6331760891b6064820152608490fd5b60405162461bcd60e51b815260048101859052601d60248201527f43616e6e6f742072656d6f766520434f4e5452414354204f574e45522e0000006044820152606490fd5b346103b6575f3660031901126103b657602062ffffff600a5416604051908152f35b346103b65760203660031901126103b6576133ef614c5f565b5f546001600160a01b0391906134089083163314614f30565b16805f52600560205261342460ff600460405f200154166152a9565b5f52600d602052602060405f2054604051908152f35b346103b65760c03660031901126103b657613453614c5f565b61345b614e44565b90613464614c8b565b6001600160401b0392906064358481116103b657613486903690600401614e8a565b926084358581116103b65761349f903690600401614e8a565b9060a4358681116103b6576134b8903690600401614e8a565b9160018060a01b0380926134d0825f54163314614f30565b165f5260206002815262ffffff6003966134f260ff8960405f20015416614f87565b165f5261350f6001938483528060405f205416961680961461501b565b845f526002815261352860ff8760405f20015416615078565b6040519661353588614cf4565b87528087019182526040870193845260608701948386525f526002815260405f209651918251898111610346578061356d8a54614ca1565b94601f958681116137be575b508490868311600114613760575f92613755575b50505f19828a1b1c191690851b1788555b518051888501918a82116103465781906135b88454614ca1565b868111613729575b5084908683116001146136cb575f926136c0575b50505f19828a1b1c191690851b1790555b600287019351908151988911610346576135ff8554614ca1565b89848211613693575b505080928911600114613649575061052d97925f92849283611a225750501b915f1990861b1c191617905551151591019060ff801983541691151516179055565b909791601f19831698855f52825f20925f905b8b821061367c5750508361052d9a10611a6157505050811b019055611a0c565b80878596829496860151815501950193019061365c565b6136b991875f5285845f20918582850160051c84019410611abd570160051c0190615005565b8989613608565b015190508b806135d4565b90879350601f19831691855f52865f20925f5b8882821061371357505084116136fc575b505050811b0190556135e5565b01515f19838c1b60f8161c191690558b80806136ef565b8385015186558b979095019493840193016136de565b61374f90855f52865f208880860160051c820192898710611abd570160051c0190615005565b8c6135c0565b015190508b8061358d565b90879350601f198316918c5f52865f20925f5b888282106137a85750508411613791575b505050811b01885561359e565b01515f19838c1b60f8161c191690558b8080613784565b8385015186558b97909501949384019301613773565b6137e4908c5f52865f208880860160051c820192898710611abd570160051c0190615005565b8c613579565b346103b65760c03660031901126103b657613803614c5f565b61380b614e44565b6001600160401b036044358181116103b65761382b903690600401614e8a565b926064358281116103b657613844903690600401614e8a565b916084358181116103b65761385d903690600401614e8a565b9360a435908282116103b65761387b62ffffff923690600401614e8a565b5f5490946001600160a01b03916138959083163314614f30565b165f5260026020526138b060ff600360405f20015416614f87565b165f5260086020526138ff60405f206040516138d48161048a602082018095615181565b5190206040516138f26020828a516104bd818d858086019101614dec565b6020815191012014615200565b61391d60ff6003604051602081816104eb8c83815193849201614dec565b6040519261392a84614cd9565b8352602083019384526040830191825260608301945f8652608084019461396560206001938489528160405193828580945193849201614dec565b81016009815203019020945190815184811161034657806139868854614ca1565b93601f94858111613bef575b50602090858311600114613b8f575f92613b84575b50505f19600383901b1c191690841b1786555b518051868401918582116103465781906139d48454614ca1565b858111613b56575b50602090858311600114613af6575f92613aeb575b50505f19600383901b1c191690841b1790555b600285019351805193841161034657613a1d8554614ca1565b828111613abd575b506020918411600114613a6b579280600395938193611ecc98965f94611ee35750501b915f1990861b1c19161790550192511515839060ff801983541691151516179055565b90601f93929319831691855f5260205f20925f5b818110613aa7575091611ecc9795939185600398969410611f2b57505050811b019055611eb5565b8284015185559386019360209384019301613a7f565b613ae590865f5260205f208480880160051c82019260208910611abd570160051c0190615005565b88613a25565b015190508a806139f1565b90869350601f19831691855f5260205f20925f5b818110613b3e57508411613b26575b505050811b019055613a04565b01515f1960f88460031b161c191690558a8080613b19565b82840151855589969094019360209384019301613b0a565b613b7e90855f5260205f208780860160051c82019260208710611abd570160051c0190615005565b8b6139dc565b015190508a806139a7565b90869350601f198316918a5f5260205f20925f5b818110613bd757508411613bbf575b505050811b0186556139ba565b01515f1960f88460031b161c191690558a8080613bb2565b82840151855589969094019360209384019301613ba3565b613c17908a5f5260205f208780860160051c82019260208710611abd570160051c0190615005565b8b613992565b346103b65760203660031901126103b6576004356001600160401b0381116103b657613c686020613c55613cb7933690600401614e8a565b8160405193828580945193849201614dec565b81016009815203019020613c7b81614d4b565b9060ff613cd3613c8d60018401614d4b565b92613cc56003613c9f60028401614d4b565b9201549460405197889760a0895260a0890190614e0d565b908782036020890152614e0d565b908582036040870152614e0d565b918181161515606085015260081c16151560808301520390f35b346103b65760203660031901126103b6576001600160a01b03613d0e614c5f565b165f526002602052613d6360405f20613d2681614d4b565b90613d7f613d3660018301614d4b565b91613d7160ff6003613d4a60028501614d4b565b9301541693604051968796608088526080880190614e0d565b908682036020880152614e0d565b908482036040860152614e0d565b90151560608301520390f35b346103b65760a03660031901126103b657613da4614c5f565b613dac614c75565b6001600160401b0391906044358381116103b657613dce903690600401614e8a565b916064358481116103b657613de7903690600401614e8a565b906084358581116103b657613e00903690600401614e8a565b5f549290916001600160a01b0391908290613e1e3383881614614f30565b165f5260209160028352600395613e3d60ff8860405f20015416614f87565b1693845f5260059081845260ff600460405f200154166141cd57855f526002845260ff8760405f200154166141885760a081901c62ffffff169062ffffff60a01b613e8783614fdd565b60a01b169062ffffff60a01b1916175f555f5260019283815260405f20866001600160601b0360a01b82541617905560405197613ec389614cf4565b88528088019283526040880194855260608801958487525f526002815260405f2097519283518a81116103465780613efb8b54614ca1565b95601f9687811161415e575b508490878311600114614100575f926140f5575b50505f19828b1b1c191690861b1789555b518051898601918b8211610346578190613f468454614ca1565b8781116140c1575b508490878311600114614063575f92614058575b50505f19828b1b1c191690861b1790555b600288019451918251998a116103465789613f8e8754614ca1565b858111614022575b50505080928911600114613fd8575061052d97925f92849283611a225750501b915f1990861b1c191617905551151591019060ff801983541691151516179055565b909791601f19831698855f52825f20925f905b8b821061400b5750508361052d9a10611a6157505050811b019055611a0c565b808785968294968601518155019501930190613feb565b61404792885f5286855f209286828601841c8501951061404f575b01901c0190615005565b898981613f96565b9350829361403d565b015190508c80613f62565b90889350601f19831691855f52865f20925f5b888282106140ab5750508411614094575b505050811b019055613f73565b01515f19838d1b60f8161c191690558c8080614087565b8385015186558c97909501949384019301614076565b6140e690855f52865f20898086018a1c8201928987106140ec575b01891c0190615005565b8d613f4e565b925081926140dc565b015190508c80613f1b565b90889350601f198316918d5f52865f20925f5b888282106141485750508411614131575b505050811b018955613f2c565b01515f19838d1b60f8161c191690558c8080614124565b8385015186558c97909501949384019301614113565b614182908d5f52865f20898086018a1c8201928987106140ec5701891c0190615005565b8d613f07565b60405162461bcd60e51b815260048101859052601960248201527f5468652041646d696e20616c7265616479206578697374732e000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052602760248201527f546865206164647265737320616c72656164792065786973747320617320612060448201526621b634b734b19760c91b6064820152608490fd5b346103b65760203660031901126103b65761423b614c5f565b5f546001600160a01b0391906142549083163314614f30565b16805f52600660205261427060ff600660405f20015416615300565b5f52600c602052602060405f2054604051908152f35b346103b65760c03660031901126103b65761429f614c5f565b6142a7614c75565b906044356001600160401b0381116103b6576142c7903690600401614e8a565b906064356001600160401b0381116103b6576142e7903690600401614e8a565b926084356001600160401b0381116103b657614307903690600401614e8a565b9160a4356001600160401b0381116103b657614327903690600401614e8a565b9160018060a01b03809261433f825f54163314614f30565b165f52600260205261435a60ff600360405f20015416614f87565b1691825f52600260205260ff600360405f2001541661482757825f52600560205260ff600460405f200154166147e25760035462ffffff908181169161439f83614fdd565b169062ffffff1916176003555f52600460205260405f20836001600160601b0360a01b825416179055604051936143d585614cd9565b84526020840194855260408401526060830152600160808301525f52600560205260405f2081519283516001600160401b038111610346576144178354614ca1565b601f81116147b2575b50602094601f8211600114614750579481929394955f92614745575b50508160011b915f199060031b1c19161782555b519182516001600160401b0381116103465761446f6001840154614ca1565b601f8111614712575b506020601f82116001146146aa57819293945f9261469f575b50508160011b915f199060031b1c19161760018301555b600282019160408201519283516001600160401b038111610346576144cd8254614ca1565b601f811161466f575b50602094601f821160011461460d579481929394955f92614602575b50508160011b915f199060031b1c19161790555b600381019160608101519283516001600160401b0381116103465761452b8254614ca1565b601f81116145d2575b506020601f821160011461457f5791816004949260809461052d985f926108e45750508160011b915f199060031b1c19161790550151151591019060ff801983541691151516179055565b601f19821695835f5260205f20965f5b8181106145ba57509261052d976080959360019383600499971061092b57505050811b0190556108cd565b8383015189556001909801976020938401930161458f565b6145fc90835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b85614534565b0151905085806144f2565b601f19821695835f5260205f20915f5b8881106146575750836001959697981061463f575b505050811b019055614506565b01515f1960f88460031b161c19169055858080614632565b9192602060018192868501518155019401920161461d565b61469990835f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b856144d6565b015190508480614491565b601f19821690600185015f5260205f20915f5b8181106146fa575095836001959697106146e2575b505050811b0160018301556144a8565b01515f1960f88460031b161c191690558480806146d2565b9192602060018192868b0151815501940192016146bd565b61473f90600185015f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b84614478565b01519050858061443c565b601f19821695845f5260205f20915f5b88811061479a57508360019596979810614782575b505050811b018255614450565b01515f1960f88460031b161c19169055858080614775565b91926020600181928685015181550194019201614760565b6147dc90845f5260205f20601f840160051c8101916020851061033c57601f0160051c0190615005565b85614420565b60405162461bcd60e51b815260206004820152601a60248201527f54686520436c696e696320616c7265616479206578697374732e0000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602760248201527f546865206164647265737320616c72656164792065786973747320617320616e6044820152661020b236b4b71760c91b6064820152608490fd5b346103b6575f3660031901126103b657602062ffffff5f5460a01c16604051908152f35b346103b65760203660031901126103b65762ffffff6148bd614e32565b165f526001602052602060018060a01b0360405f205416604051908152f35b346103b65760203660031901126103b6576148f5614c5f565b5f54906001600160a01b039061490e3383851614614f30565b1680916001600160601b0360a01b16175f55807f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a7355f80a3005b346103b65760403660031901126103b657614960614c5f565b6001600160a01b03165f908152600d602052604090208054602435908110156103b65761180962ffffff91602093614e56565b346103b65760203660031901126103b6576149ac614e32565b62ffffff165f908152600b6020526040902080546001600160a01b0390811691906149d960018301614d4b565b916149e660028201614d4b565b916149f360038301614d4b565b90614a0060048401614d4b565b9060058401541660068401614a1490614d4b565b614a2060078601614d4b565b614a2c60088701614d4b565b90614a3960098801614d4b565b92614a46600a8901614d4b565b94614a53600b8a01614d4b565b96614a60600c8b01614d4b565b98614a6d600d8c01614d4b565b9a600e015460ff169b6040519e8f9e8f9182526101e08060208401528201614a9491614e0d565b908082039060400152614aa691614e0d565b8d810360608f0152614ab791614e0d565b8c810360808e0152614ac891614e0d565b9060a08c01528a810360c08c0152614adf91614e0d565b89810360e08b0152614af091614e0d565b8881036101008a0152614b0291614e0d565b878103610120890152614b1491614e0d565b868103610140880152614b2691614e0d565b858103610160870152614b3891614e0d565b848103610180860152614b4a91614e0d565b8381036101a0850152614b5c91614e0d565b9015156101c08301520390f35b346103b65760203660031901126103b6576001600160a01b03614b8a614c5f565b165f52600660205260405f2060e0614ba182614d4b565b91614c53614bb160018301614d4b565b91614c45614bc160028301614d4b565b614c37614bd060038501614d4b565b614c29614bdf60048701614d4b565b93614c1b60ff6006614bf360058b01614d4b565b9901541699614c0d6040519d8d8f9e8f9081520190614e0d565b8c810360208e015290614e0d565b908a820360408c0152614e0d565b9088820360608a0152614e0d565b908682036080880152614e0d565b9084820360a0860152614e0d565b90151560c08301520390f35b600435906001600160a01b03821682036103b657565b602435906001600160a01b03821682036103b657565b604435906001600160a01b03821682036103b657565b90600182811c92168015614ccf575b6020831014614cbb57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691614cb0565b60a081019081106001600160401b0382111761034657604052565b608081019081106001600160401b0382111761034657604052565b602081019081106001600160401b0382111761034657604052565b90601f801991011681019081106001600160401b0382111761034657604052565b9060405191825f825492614d5e84614ca1565b9081845260019485811690815f14614dc95750600114614d89575b5050614d8792500383614d2a565b565b909391505f52602090815f20935f915b818310614db1575050614d8793508201015f80614d79565b85548884018501529485019487945091830191614d99565b915050614d8794506020925060ff191682840152151560051b8201015f80614d79565b5f5b838110614dfd5750505f910152565b8181015183820152602001614dee565b90602091614e2681518092818552858086019101614dec565b601f01601f1916010190565b6004359062ffffff821682036103b657565b6024359062ffffff821682036103b657565b9190918054831015614e76575f526003600a60205f208185040193060290565b634e487b7160e01b5f52603260045260245ffd5b81601f820112156103b6578035906001600160401b0382116103465760405192614ebe601f8401601f191660200185614d2a565b828452602083830101116103b657815f926020809301838601378301015290565b60606003198201126103b6576004356001600160a01b03811681036103b6579160243562ffffff811681036103b65791604435906001600160401b0382116103b657614f2d91600401614e8a565b90565b15614f3757565b60405162461bcd60e51b815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604482015261371760f11b6064820152608490fd5b15614f8e57565b60405162461bcd60e51b815260206004820152602160248201527f4f6e6c792041646d696e2063616e2075736520746869732066756e6374696f6e6044820152601760f91b6064820152608490fd5b62ffffff809116908114614ff15760010190565b634e487b7160e01b5f52601160045260245ffd5b818110615010575050565b5f8155600101615005565b1561502257565b60405162461bcd60e51b815260206004820152602860248201527f436f756e7420616e642061646472657373206469646e2774206d617463682061604482015267371032b73a393c9760c11b6064820152608490fd5b1561507f57565b60405162461bcd60e51b815260206004820152601860248201527f5468652041646d696e20646f65736e27742065786973742e00000000000000006044820152606490fd5b6150ce8154614ca1565b90816150d8575050565b81601f5f93116001146150e9575055565b908083918252615108601f60208420940160051c840160018501615005565b5555565b60035f91615119816150c4565b615125600182016150c4565b615131600282016150c4565b0155565b1561513c57565b60405162461bcd60e51b815260206004820152601960248201527f54686520436c696e696320646f65736e27742065786973742e000000000000006044820152606490fd5b5f9291815461518f81614ca1565b926001918083169081156151e557506001146151ac575b50505050565b9091929394505f52602090815f20905f915b8583106151d4575050505001905f8080806151a6565b8054858401529183019181016151be565b60ff191684525050508115159091020191505f8080806151a6565b1561520757565b60405162461bcd60e51b815260206004820152602860248201527f436f756e7420616e6420626172636f6465206469646e2774206d617463682061604482015267371032b73a393c9760c11b6064820152608490fd5b1561526457565b60405162461bcd60e51b815260206004820152601a60248201527f5468652056616363696e6520646f65736e27742065786973742e0000000000006044820152606490fd5b156152b057565b60405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920436c696e69632063616e2075736520746869732066756e6374696f604482015261371760f11b6064820152608490fd5b1561530757565b60405162461bcd60e51b815260206004820152602360248201527f4f6e6c792050617469656e742063616e2075736520746869732066756e63746960448201526237b71760e91b6064820152608490fd5b8054680100000000000000008110156103465761537a91600182018155614e56565b9091565b1561538557565b60405162461bcd60e51b815260206004820152601e60248201527f54686520436572746966696361746520646f65736e27742065786973742e00006044820152606490fd5b156153d157565b60405162461bcd60e51b815260206004820152603d60248201527f54686520436572746966696361746520646f65736e27742062656c6f6e67207460448201527f6f207468652063757272656e742063616c6c696e6720436c696e69632e0000006064820152608490fd5b1561544357565b60405162461bcd60e51b815260206004820152602260248201527f54686520436572746966696361746520697320616c7265616479207369676e65604482015261321760f11b6064820152608490fdfea2646970667358221220332647ea4d0cb0141eaa0d216978fc1b8ad373196b76d2b21e77ff31452c708764736f6c63430008140033";

	public static final String FUNC_ADDADMIN = "addAdmin";

	public static final String FUNC_ADDCERTIFICATE = "addCertificate";

	public static final String FUNC_ADDCLINIC = "addClinic";

	public static final String FUNC_ADDVACCINE = "addVaccine";

	public static final String FUNC_ADMINCOUNT = "adminCount";

	public static final String FUNC_ADMINREGISTRY = "adminRegistry";

	public static final String FUNC_ADMINS = "admins";

	public static final String FUNC_CERTIFICATECOUNT = "certificateCount";

	public static final String FUNC_CERTIFICATES = "certificates";

	public static final String FUNC_CHANGEVACCINESTATUS = "changeVaccineStatus";

	public static final String FUNC_CLINICCERTIFICATES = "clinicCertificates";

	public static final String FUNC_CLINICCOUNT = "clinicCount";

	public static final String FUNC_CLINICREGISTRY = "clinicRegistry";

	public static final String FUNC_CLINICSIGNCERTIFICATE = "clinicSignCertificate";

	public static final String FUNC_CLINICS = "clinics";

	public static final String FUNC_GETCLINICCERTIFICATECOUNT = "getClinicCertificateCount";

	public static final String FUNC_GETPATIENTCERTIFICATECOUNT = "getPatientCertificateCount";

	public static final String FUNC_PATIENTCERTIFICATES = "patientCertificates";

	public static final String FUNC_PATIENTSIGNCERTIFICATE = "patientSignCertificate";

	public static final String FUNC_PATIENTS = "patients";

	public static final String FUNC_REMOVEADMIN = "removeAdmin";

	public static final String FUNC_REMOVECERTIFICATE = "removeCertificate";

	public static final String FUNC_REMOVECLINIC = "removeClinic";

	public static final String FUNC_REMOVEVACCINE = "removeVaccine";

	public static final String FUNC_TRANSFER = "transfer";

	public static final String FUNC_updateAdmin = "updateAdmin";

	public static final String FUNC_UPDATECLINIC = "updateClinic";

	public static final String FUNC_UPDATEPATIENT = "updatePatient";

	public static final String FUNC_UPDATEVACCINE = "updateVaccine";

	public static final String FUNC_VACCINECOUNT = "vaccineCount";

	public static final String FUNC_VACCINEREGISTRY = "vaccineRegistry";

	public static final String FUNC_VACCINES = "vaccines";

	public static final Event OWNERSET_EVENT = new Event("OwnerSet",
			Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
			}, new TypeReference<Address>(true) {
			}));;

	@Deprecated
	protected EtherVac(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
	}

	protected EtherVac(String contractAddress, Web3j web3j, Credentials credentials,
			ContractGasProvider contractGasProvider) {
		super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
	}

	@Deprecated
	protected EtherVac(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
			BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
	}

	protected EtherVac(String contractAddress, Web3j web3j, TransactionManager transactionManager,
			ContractGasProvider contractGasProvider) {
		super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
	}

	public List<OwnerSetEventResponse> getOwnerSetEvents(TransactionReceipt transactionReceipt) {
		List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSET_EVENT, transactionReceipt);
		ArrayList<OwnerSetEventResponse> responses = new ArrayList<OwnerSetEventResponse>(valueList.size());
		for (Contract.EventValuesWithLog eventValues : valueList) {
			OwnerSetEventResponse typedResponse = new OwnerSetEventResponse();
			typedResponse.log = eventValues.getLog();
			typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
			typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Flowable<OwnerSetEventResponse> ownerSetEventFlowable(EthFilter filter) {
		return web3j.ethLogFlowable(filter).map(new Function<Log, OwnerSetEventResponse>() {
			@Override
			public OwnerSetEventResponse apply(Log log) {
				Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSET_EVENT, log);
				OwnerSetEventResponse typedResponse = new OwnerSetEventResponse();
				typedResponse.log = log;
				typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
				typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
				return typedResponse;
			}
		});
	}

	public Flowable<OwnerSetEventResponse> ownerSetEventFlowable(DefaultBlockParameter startBlock,
			DefaultBlockParameter endBlock) {
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(OWNERSET_EVENT));
		return ownerSetEventFlowable(filter);
	}

	public RemoteFunctionCall<TransactionReceipt> addAdmin(String caller, String adminAddress, String name,
			String phoneNo, String email) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDADMIN,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.Address(160, adminAddress),
						new org.web3j.abi.datatypes.Utf8String(name), new org.web3j.abi.datatypes.Utf8String(phoneNo),
						new org.web3j.abi.datatypes.Utf8String(email)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> addCertificate(String caller, String patient, String icNo,
			String patientName, String gender, String nationality, String clinicName, String barcode,
			String vaccineName, String manufacturer, String batchNo, String date) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDCERTIFICATE,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.Address(160, patient), new org.web3j.abi.datatypes.Utf8String(icNo),
						new org.web3j.abi.datatypes.Utf8String(patientName),
						new org.web3j.abi.datatypes.Utf8String(gender),
						new org.web3j.abi.datatypes.Utf8String(nationality),
						new org.web3j.abi.datatypes.Utf8String(clinicName),
						new org.web3j.abi.datatypes.Utf8String(barcode),
						new org.web3j.abi.datatypes.Utf8String(vaccineName),
						new org.web3j.abi.datatypes.Utf8String(manufacturer),
						new org.web3j.abi.datatypes.Utf8String(batchNo), new org.web3j.abi.datatypes.Utf8String(date)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> addClinic(String caller, String clinicAddress, String name,
			String phoneNo, String email, String location) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDCLINIC,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.Address(160, clinicAddress),
						new org.web3j.abi.datatypes.Utf8String(name), new org.web3j.abi.datatypes.Utf8String(phoneNo),
						new org.web3j.abi.datatypes.Utf8String(email),
						new org.web3j.abi.datatypes.Utf8String(location)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> addVaccine(String caller, String barcode, String name, String purpose,
			String manufacturer) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDVACCINE,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.Utf8String(barcode), new org.web3j.abi.datatypes.Utf8String(name),
						new org.web3j.abi.datatypes.Utf8String(purpose),
						new org.web3j.abi.datatypes.Utf8String(manufacturer)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<BigInteger> adminCount() {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADMINCOUNT,
				Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<String> adminRegistry(BigInteger param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADMINREGISTRY,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
				}));
		return executeRemoteCallSingleValueReturn(function, String.class);
	}

	public RemoteFunctionCall<Tuple4<String, String, String, Boolean>> admins(String param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADMINS,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Bool>() {
				}));
		return new RemoteFunctionCall<Tuple4<String, String, String, Boolean>>(function,
				new Callable<Tuple4<String, String, String, Boolean>>() {
					@Override
					public Tuple4<String, String, String, Boolean> call() throws Exception {
						List<Type> results = executeCallMultipleValueReturn(function);
						return new Tuple4<String, String, String, Boolean>((String) results.get(0).getValue(),
								(String) results.get(1).getValue(), (String) results.get(2).getValue(),
								(Boolean) results.get(3).getValue());
					}
				});
	}

	public RemoteFunctionCall<BigInteger> certificateCount() {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CERTIFICATECOUNT,
				Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<Tuple15<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean>> certificates(
			BigInteger param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CERTIFICATES,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Address>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Bool>() {
				}));
		return new RemoteFunctionCall<Tuple15<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean>>(
				function,
				new Callable<Tuple15<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean>>() {
					@Override
					public Tuple15<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean> call()
							throws Exception {
						List<Type> results = executeCallMultipleValueReturn(function);
						return new Tuple15<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean>(
								(String) results.get(0).getValue(), (String) results.get(1).getValue(),
								(String) results.get(2).getValue(), (String) results.get(3).getValue(),
								(String) results.get(4).getValue(), (String) results.get(5).getValue(),
								(String) results.get(6).getValue(), (String) results.get(7).getValue(),
								(String) results.get(8).getValue(), (String) results.get(9).getValue(),
								(String) results.get(10).getValue(), (String) results.get(11).getValue(),
								(String) results.get(12).getValue(), (String) results.get(13).getValue(),
								(Boolean) results.get(14).getValue());
					}
				});
	}

	public RemoteFunctionCall<TransactionReceipt> changeVaccineStatus(String caller, BigInteger count, String barcode,
			Boolean status) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHANGEVACCINESTATUS,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Utf8String(barcode), new org.web3j.abi.datatypes.Bool(status)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<BigInteger> clinicCertificates(String param0, BigInteger param1) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLINICCERTIFICATES,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0),
						new org.web3j.abi.datatypes.generated.Uint256(param1)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<BigInteger> clinicCount() {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLINICCOUNT,
				Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<String> clinicRegistry(BigInteger param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLINICREGISTRY,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
				}));
		return executeRemoteCallSingleValueReturn(function, String.class);
	}

	public RemoteFunctionCall<TransactionReceipt> clinicSignCertificate(String caller, BigInteger count,
			String clinicSign) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
				FUNC_CLINICSIGNCERTIFICATE,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Utf8String(clinicSign)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>> clinics(String param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLINICS,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Bool>() {
				}));
		return new RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>>(function,
				new Callable<Tuple5<String, String, String, String, Boolean>>() {
					@Override
					public Tuple5<String, String, String, String, Boolean> call() throws Exception {
						List<Type> results = executeCallMultipleValueReturn(function);
						return new Tuple5<String, String, String, String, Boolean>((String) results.get(0).getValue(),
								(String) results.get(1).getValue(), (String) results.get(2).getValue(),
								(String) results.get(3).getValue(), (Boolean) results.get(4).getValue());
					}
				});
	}

	public RemoteFunctionCall<BigInteger> getClinicCertificateCount(String caller) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
				FUNC_GETCLINICCERTIFICATECOUNT, Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<BigInteger> getPatientCertificateCount(String caller) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
				FUNC_GETPATIENTCERTIFICATECOUNT, Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<BigInteger> patientCertificates(String param0, BigInteger param1) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PATIENTCERTIFICATES,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0),
						new org.web3j.abi.datatypes.generated.Uint256(param1)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<TransactionReceipt> patientSignCertificate(String caller, BigInteger count,
			String patientSign) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
				FUNC_PATIENTSIGNCERTIFICATE,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Utf8String(patientSign)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<Tuple7<String, String, String, String, String, String, Boolean>> patients(String param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PATIENTS,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Bool>() {
				}));
		return new RemoteFunctionCall<Tuple7<String, String, String, String, String, String, Boolean>>(function,
				new Callable<Tuple7<String, String, String, String, String, String, Boolean>>() {
					@Override
					public Tuple7<String, String, String, String, String, String, Boolean> call() throws Exception {
						List<Type> results = executeCallMultipleValueReturn(function);
						return new Tuple7<String, String, String, String, String, String, Boolean>(
								(String) results.get(0).getValue(), (String) results.get(1).getValue(),
								(String) results.get(2).getValue(), (String) results.get(3).getValue(),
								(String) results.get(4).getValue(), (String) results.get(5).getValue(),
								(Boolean) results.get(6).getValue());
					}
				});
	}

	public RemoteFunctionCall<TransactionReceipt> removeAdmin(String caller, BigInteger count, String adminAddress) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REMOVEADMIN,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Address(160, adminAddress)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> removeCertificate(String caller, BigInteger count) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REMOVECERTIFICATE,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> removeClinic(String caller, BigInteger count, String clinicAddress) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REMOVECLINIC,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Address(160, clinicAddress)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> removeVaccine(String caller, BigInteger count, String barcode) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REMOVEVACCINE,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Utf8String(barcode)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> transfer(String newOwner) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRANSFER,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> updateAdmin(String caller, BigInteger count, String adminAddress,
			String name, String phoneNo, String email) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_updateAdmin,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Address(160, adminAddress),
						new org.web3j.abi.datatypes.Utf8String(name), new org.web3j.abi.datatypes.Utf8String(phoneNo),
						new org.web3j.abi.datatypes.Utf8String(email)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> updateAdmin(String caller, String name, String phoneNo,
			String email) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_updateAdmin,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.Utf8String(name), new org.web3j.abi.datatypes.Utf8String(phoneNo),
						new org.web3j.abi.datatypes.Utf8String(email)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> updateClinic(String caller, BigInteger count, String clinicAddress,
			String name, String phoneNo, String email, String location) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UPDATECLINIC,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Address(160, clinicAddress),
						new org.web3j.abi.datatypes.Utf8String(name), new org.web3j.abi.datatypes.Utf8String(phoneNo),
						new org.web3j.abi.datatypes.Utf8String(email),
						new org.web3j.abi.datatypes.Utf8String(location)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> updatePatient(String caller, String icNo, String name, String gender,
			String nationality, String phoneNo, String email) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UPDATEPATIENT,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.Utf8String(icNo), new org.web3j.abi.datatypes.Utf8String(name),
						new org.web3j.abi.datatypes.Utf8String(gender),
						new org.web3j.abi.datatypes.Utf8String(nationality),
						new org.web3j.abi.datatypes.Utf8String(phoneNo), new org.web3j.abi.datatypes.Utf8String(email)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> updateVaccine(String caller, BigInteger count, String barcode,
			String name, String purpose, String manufacturer) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UPDATEVACCINE,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, caller),
						new org.web3j.abi.datatypes.generated.Uint24(count),
						new org.web3j.abi.datatypes.Utf8String(barcode), new org.web3j.abi.datatypes.Utf8String(name),
						new org.web3j.abi.datatypes.Utf8String(purpose),
						new org.web3j.abi.datatypes.Utf8String(manufacturer)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<BigInteger> vaccineCount() {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VACCINECOUNT,
				Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteFunctionCall<String> vaccineRegistry(BigInteger param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VACCINEREGISTRY,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}));
		return executeRemoteCallSingleValueReturn(function, String.class);
	}

	public RemoteFunctionCall<Tuple5<String, String, String, Boolean, Boolean>> vaccines(String param0) {
		final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VACCINES,
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Bool>() {
				}, new TypeReference<Bool>() {
				}));
		return new RemoteFunctionCall<Tuple5<String, String, String, Boolean, Boolean>>(function,
				new Callable<Tuple5<String, String, String, Boolean, Boolean>>() {
					@Override
					public Tuple5<String, String, String, Boolean, Boolean> call() throws Exception {
						List<Type> results = executeCallMultipleValueReturn(function);
						return new Tuple5<String, String, String, Boolean, Boolean>((String) results.get(0).getValue(),
								(String) results.get(1).getValue(), (String) results.get(2).getValue(),
								(Boolean) results.get(3).getValue(), (Boolean) results.get(4).getValue());
					}
				});
	}

	@Deprecated
	public static EtherVac load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		return new EtherVac(contractAddress, web3j, credentials, gasPrice, gasLimit);
	}

	@Deprecated
	public static EtherVac load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
			BigInteger gasPrice, BigInteger gasLimit) {
		return new EtherVac(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
	}

	public static EtherVac load(String contractAddress, Web3j web3j, Credentials credentials,
			ContractGasProvider contractGasProvider) {
		return new EtherVac(contractAddress, web3j, credentials, contractGasProvider);
	}

	public static EtherVac load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
			ContractGasProvider contractGasProvider) {
		return new EtherVac(contractAddress, web3j, transactionManager, contractGasProvider);
	}

	public static RemoteCall<EtherVac> deploy(Web3j web3j, Credentials credentials,
			ContractGasProvider contractGasProvider) {
		return deployRemoteCall(EtherVac.class, web3j, credentials, contractGasProvider, BINARY, "");
	}

	public static RemoteCall<EtherVac> deploy(Web3j web3j, TransactionManager transactionManager,
			ContractGasProvider contractGasProvider) {
		return deployRemoteCall(EtherVac.class, web3j, transactionManager, contractGasProvider, BINARY, "");
	}

	@Deprecated
	public static RemoteCall<EtherVac> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		return deployRemoteCall(EtherVac.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
	}

	@Deprecated
	public static RemoteCall<EtherVac> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
			BigInteger gasLimit) {
		return deployRemoteCall(EtherVac.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
	}

	public static class OwnerSetEventResponse extends BaseEventResponse {
		public String oldOwner;

		public String newOwner;
	}
}
